apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: trivy-sample-pipelines
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: pipeline-pvc
      optional: false
    - name: dockerconfig
      optional: true
    - name: src-file
    - name: dest-file
  description: Demo Pipeline for Trivy
  params:
    - name: prod-image
      type: string
      description: Full name of prod image repo.Presently set to use temp docker registry
    - name: url
      type: string
      description: Git Repo to Clone
    - name: staging-image
      type: string
      description: Full name of staging image repo.Presently set to use temp docker registry
    - name: trivy_args_image_local
      type: array
      description: The Arguments to be passed to Trivy command for local image.
    - name: trivy_args_config
      type: array
      description: The Arguments to be passed to Trivy command for config image.
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.url)
      workspaces:
        - name: output
          workspace: pipeline-pvc
    - name: create-staging-docker-secrets
      taskSpec:
        steps:
          - name: create-staging-secrets
            image: quay.io/mooyeg/python3
            script: |
              mkdir /workspace/source/staging-secrets && cd /workspace/source/staging-secrets && \
              openssl req -x509 -newkey rsa:4096 -days 365 -nodes -sha256 -keyout ./tls.key -out ./tls.crt -subj "/CN=docker-registry-staging" && \
              htpasswd -Bbn myuser mypasswd > ./htpasswd
        workspaces:
          - name: source
      workspaces:
        - name: source
          workspace: pipeline-pvc
      runAfter:
        - git-clone
    - name: create-staging-docker-registry
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl create secret tls certs-secret-staging --cert=/workspace/manifest-dir/staging-secrets/tls.crt --key=/workspace/manifest-dir/staging-secrets/tls.key -n tekton-pipelines && \
            kubectl create secret generic auth-secret-staging --from-file=/workspace/manifest-dir/staging-secrets/htpasswd -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-pvc-staging.yaml -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-registry-staging.yaml -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-svc-staging.yaml  -n tekton-pipelines
      workspaces:
        - name: manifest-dir
          workspace: pipeline-pvc
      runAfter:
        - create-staging-docker-secrets
    - name: create-staging-registry-pull-secret
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl create secret docker-registry staging-maincred \
            --docker-server=docker-registry-staging.tekton-pipelines.svc.cluster.local:5000 \
            --docker-username=myuser \
            --docker-password=mypasswd \
            --docker-email=test@email.com -n tekton-pipelines && \
            kubectl create secret generic staging-kanikocred --from-literal="config.json"=$(kubectl get secret staging-maincred -n tekton-pipelines -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d) -n tekton-pipelines
      runAfter:
        - create-staging-docker-registry
    - name: create-prod-docker-secrets
      taskSpec:
        steps:
          - name: create-prod-secrets
            image: quay.io/mooyeg/python3
            script: |
              mkdir /workspace/source/prod-secrets && cd /workspace/source/prod-secrets && \
              openssl req -x509 -newkey rsa:4096 -days 365 -nodes -sha256 -keyout ./tls.key -out ./tls.crt -subj "/CN=docker-registry-prod" && \
              htpasswd -Bbn myuser mypasswd > ./htpasswd
        workspaces:
          - name: source
      workspaces:
        - name: source
          workspace: pipeline-pvc
      runAfter:
        - git-clone
    - name: create-prod-docker-registry
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl create secret tls certs-secret-prod --cert=/workspace/manifest-dir/prod-secrets/tls.crt --key=/workspace/manifest-dir/prod-secrets/tls.key -n tekton-pipelines && \
            kubectl create secret generic auth-secret-prod --from-file=/workspace/manifest-dir/prod-secrets/htpasswd -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-pvc-prod.yaml -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-registry-prod.yaml -n tekton-pipelines && \
            kubectl apply -f /workspace/manifest-dir/cicd/docker/docker-svc-prod.yaml  -n tekton-pipelines
      workspaces:
        - name: manifest-dir
          workspace: pipeline-pvc
      runAfter:
        - create-prod-docker-secrets
    - name: create-prod-registry-pull-secret
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl create secret docker-registry prod-maincred \
            --docker-server=docker-registry-prod.tekton-pipelines.svc.cluster.local:5000 \
            --docker-username=myuser \
            --docker-password=mypasswd \
            --docker-email=test@email.com -n tekton-pipelines && \
            kubectl create secret generic prod-kanikocred --from-literal="config.json"=$(kubectl get secret prod-maincred -n tekton-pipelines -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d) -n tekton-pipelines
      runAfter:
        - create-prod-docker-registry
    - name: lint-code
      taskRef:
        name: pylint
        kind: Task
      params:
        - name: path
          value: /workspace/source/trivy_app_sample.py
      workspaces:
        - name: source
          workspace: pipeline-pvc
      runAfter:
        - git-clone
    - name: mkdir-for-local-oci
      taskSpec:
        steps:
          - name: mkdir
            image: zshusers/zsh:4.3.15
            script: mkdir /workspace/source/local
        workspaces:
          - name: source
      workspaces:
        - name: source
          workspace: pipeline-pvc
      runAfter:
        - lint-code
    - name: kaniko-build
      taskRef:
        name: kaniko
        kind: Task
      params:
        - name: IMAGE
          value: $(params.staging-image)
        - name: EXTRA_ARGS
          value:
            - --skip-tls-verify
            - --insecure
      workspaces:
        - name: source
          workspace: pipeline-pvc
        - name: dockerconfig
          workspace: dockerconfig
      runAfter:
        - lint-code
        - create-staging-registry-pull-secret
      retries: 3
    - name: skopeo-local-copy
      taskRef:
        name: custom-skopeo
        kind: Task
      params:
        - name: args
          value: |
            copy docker://$(params.staging-image) --src-tls-verify=false --src-authfile /workspace/src-file/.dockerconfigjson oci:/workspace/source/local
      workspaces:
        - name: source
          workspace: pipeline-pvc
        - name: src-file
          workspace: src-file
        - name: dest-file
          workspace: dest-file
      runAfter:
        - kaniko-build
    - name: trivy-scan-local-image
      taskRef:
        name: trivy-scanner
        kind: Task
      params:
        - name: ARGS
          value: ["$(params.trivy_args_image_local[*])"]
        - name: IMAGE_PATH
          value: " /workspace/manifest-dir/local"
      workspaces:
        - name: manifest-dir
          workspace: pipeline-pvc
      runAfter:
        - skopeo-local-copy
    - name: skopeo-remote-copy
      taskRef:
        name: custom-skopeo
        kind: Task
      params:
        - name: args
          value: |
            copy docker://$(params.staging-image) --src-tls-verify=false --src-authfile /workspace/src-file/.dockerconfigjson docker://$(params.prod-image):latest --dest-tls-verify=false --dest-authfile /workspace/dest-file/.dockerconfigjson
      workspaces:
        - name: source
          workspace: pipeline-pvc
        - name: src-file
          workspace: src-file
        - name: dest-file
          workspace: dest-file
      runAfter:
        - trivy-scan-local-image
    - name: trivy-scan-deployment-code
      taskRef:
        name: trivy-scanner
        kind: Task
      params:
        - name: ARGS
          value: ["$(params.trivy_args_config[*])"]
        - name: IMAGE_PATH
          value: "/workspace/manifest-dir/deploy"
      workspaces:
        - name: manifest-dir
          workspace: pipeline-pvc
      runAfter:
        - skopeo-remote-copy
    - name: deploy-application
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl apply -f /workspace/manifest-dir/deploy/namespace.yaml -n trivy-demo && \
            kubectl apply -f /workspace/manifest-dir/deploy/service.yaml -n trivy-demo && \
            kubectl apply -f /workspace/manifest-dir/deploy/deployment.yaml -n trivy-demo
      workspaces:
        - name: manifest-dir
          workspace: pipeline-pvc
      runAfter:
        - trivy-scan-deployment-code
  finally:
    - name: cleanup-workspace
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            kubectl delete pod/docker-registry-prod -n tekton-pipelines; \
            kubectl delete pod/docker-registry-staging -n tekton-pipelines; \
            kubectl delete secret/prod-maincred -n tekton-pipelines; \
            kubectl delete secret/prod-kanikocred -n tekton-pipelines; \
            kubectl delete secret/staging-maincred -n tekton-pipelines; \
            kubectl delete secret/staging-kanikocred -n tekton-pipelines; \
            kubectl delete secret/auth-secret-prod -n tekton-pipelines; \
            kubectl delete secret/auth-secret-staging -n tekton-pipelines; \
            kubectl delete secret/certs-secret-prod -n tekton-pipelines; \
            kubectl delete secret/certs-secret-staging -n tekton-pipelines; \
            kubectl delete pvc/docker-pvc-prod -n tekton-pipelines; \
            kubectl delete pvc/docker-pvc-staging -n tekton-pipelines; \
            kubectl delete svc/docker-registry-staging -n tekton-pipelines; \
            kubectl delete svc/docker-registry-prod -n tekton-pipelines
